"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = exports.definitions = void 0;
var _utils = require("@graphql-tools/utils");
var _FunctionsRouter = require("../../Routers/FunctionsRouter");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const definitions = exports.definitions = `
  directive @resolve(to: String) on FIELD_DEFINITION
  directive @mock(with: Any!) on FIELD_DEFINITION
`;
const load = parseGraphQLSchema => {
  parseGraphQLSchema.graphQLSchemaDirectivesDefinitions = definitions;
  const resolveDirective = schema => (0, _utils.mapSchema)(schema, {
    [_utils.MapperKind.OBJECT_FIELD]: fieldConfig => {
      var _getDirective;
      const directive = (_getDirective = (0, _utils.getDirective)(schema, fieldConfig, 'resolve')) === null || _getDirective === void 0 ? void 0 : _getDirective[0];
      if (directive) {
        const {
          to: targetCloudFunction
        } = directive;
        fieldConfig.resolve = async (_source, args, context, gqlInfo) => {
          try {
            const {
              config,
              auth,
              info
            } = context;
            const functionName = targetCloudFunction || gqlInfo.fieldName;
            return (await _FunctionsRouter.FunctionsRouter.handleCloudFunction({
              params: {
                functionName
              },
              config,
              auth,
              info,
              body: args,
              parent: _objectSpread({
                className: String(gqlInfo.parentType)
              }, _source)
            })).response.result;
          } catch (e) {
            parseGraphQLSchema.handleError(e);
          }
        };
      }
      return fieldConfig;
    }
  });
  const mockDirective = schema => (0, _utils.mapSchema)(schema, {
    [_utils.MapperKind.OBJECT_FIELD]: fieldConfig => {
      var _getDirective2;
      const directive = (_getDirective2 = (0, _utils.getDirective)(schema, fieldConfig, 'mock')) === null || _getDirective2 === void 0 ? void 0 : _getDirective2[0];
      if (directive) {
        const {
          with: mockValue
        } = directive;
        fieldConfig.resolve = async () => mockValue;
      }
      return fieldConfig;
    }
  });
  parseGraphQLSchema.graphQLSchemaDirectives = schema => mockDirective(resolveDirective(schema));
};
exports.load = load;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,